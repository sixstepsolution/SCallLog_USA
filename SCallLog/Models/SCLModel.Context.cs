//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCallLog.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class scallEntities : DbContext
    {
        public scallEntities()
            : base("name=scallEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SCL_Category> SCL_Category { get; set; }
        public virtual DbSet<SCL_CompanyRegistration> SCL_CompanyRegistration { get; set; }
        public virtual DbSet<SCL_ComplaintImages> SCL_ComplaintImages { get; set; }
        public virtual DbSet<SCL_ComplaintsAllocated> SCL_ComplaintsAllocated { get; set; }
        public virtual DbSet<SCL_Customer> SCL_Customer { get; set; }
        public virtual DbSet<SCL_Department> SCL_Department { get; set; }
        public virtual DbSet<SCL_Login> SCL_Login { get; set; }
        public virtual DbSet<SCL_Mobile_Complaints_Audit> SCL_Mobile_Complaints_Audit { get; set; }
        public virtual DbSet<SCL_Sub_Category> SCL_Sub_Category { get; set; }
        public virtual DbSet<SCL_UserDepartments> SCL_UserDepartments { get; set; }
        public virtual DbSet<SCL_UserRoles> SCL_UserRoles { get; set; }
        public virtual DbSet<SCL_UserRoleScreenMapping> SCL_UserRoleScreenMapping { get; set; }
        public virtual DbSet<SCL_Users> SCL_Users { get; set; }
        public virtual DbSet<SCL_UsersAudit> SCL_UsersAudit { get; set; }
        public virtual DbSet<SCL_UserScreens> SCL_UserScreens { get; set; }
        public virtual DbSet<SCL_UserwiseScreenMapping> SCL_UserwiseScreenMapping { get; set; }
        public virtual DbSet<SCL_Mobile_Complaints> SCL_Mobile_Complaints { get; set; }
        public virtual DbSet<SCL_JobCards> SCL_JobCards { get; set; }
        public virtual DbSet<SCL_Comp_Status> SCL_Comp_Status { get; set; }
        public virtual DbSet<SCL_WorkOrder_Details> SCL_WorkOrder_Details { get; set; }
        public virtual DbSet<SCL_WorkOrder_Master> SCL_WorkOrder_Master { get; set; }
    
        public virtual ObjectResult<sp_getComplaintHistoryByRefNo_Result> sp_getComplaintHistoryByRefNo(string refNumber)
        {
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("RefNumber", refNumber) :
                new ObjectParameter("RefNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getComplaintHistoryByRefNo_Result>("sp_getComplaintHistoryByRefNo", refNumberParameter);
        }
    
        public virtual ObjectResult<sp_getComplaintHistoryByRefNumber_Result> sp_getComplaintHistoryByRefNumber(string refNumber)
        {
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("RefNumber", refNumber) :
                new ObjectParameter("RefNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getComplaintHistoryByRefNumber_Result>("sp_getComplaintHistoryByRefNumber", refNumberParameter);
        }
    
        public virtual ObjectResult<sp_getDashboardData_Result> sp_getDashboardData(string refNumber, Nullable<int> companyID)
        {
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("RefNumber", refNumber) :
                new ObjectParameter("RefNumber", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDashboardData_Result>("sp_getDashboardData", refNumberParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_getDashboardData1_Result> sp_getDashboardData1(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDashboardData1_Result>("sp_getDashboardData1", companyIDParameter);
        }
    
        public virtual ObjectResult<sp_getComplaintCountsByMonthWise_Result> sp_getComplaintCountsByMonthWise(string year, string status, Nullable<int> companyID)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getComplaintCountsByMonthWise_Result>("sp_getComplaintCountsByMonthWise", yearParameter, statusParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_getComplaintCountsByDepartmentWise_Result> sp_getComplaintCountsByDepartmentWise(string department, Nullable<int> companyID)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getComplaintCountsByDepartmentWise_Result>("sp_getComplaintCountsByDepartmentWise", departmentParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_getJobCardHistoryByRefNumber_Result> sp_getJobCardHistoryByRefNumber(string refNumber)
        {
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("RefNumber", refNumber) :
                new ObjectParameter("RefNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getJobCardHistoryByRefNumber_Result>("sp_getJobCardHistoryByRefNumber", refNumberParameter);
        }
    }
}
